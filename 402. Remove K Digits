class Solution {
    public String removeKdigits(String num, int k) {
        int n = num.length();
        // Edge case: if k is equal to the length of num, remove all digits
        if (k == n) {
            return "0";
        }
        Stack<Character> stack = new Stack<>();
        // Iterate through each digit in num
        for (int i = 0; i < n; i++) {
            char digit = num.charAt(i);
            // Remove digits from the stack until reaching a smaller digit or removing k digits
            while (!stack.isEmpty() && k > 0 && digit < stack.peek()) {
                stack.pop();
                k--;
            }
            stack.push(digit);
        }
        // Remove any remaining digits from the stack to meet the k-digit removal requirement
        while (k > 0) {
            stack.pop();
            k--;
        }
        StringBuilder sb = new StringBuilder();
        // Construct the resulting string by popping digits from the stack in reverse order
        while (!stack.isEmpty()) {
            sb.insert(0, stack.pop());
        }
        // Remove leading zeros from the resulting string
        while (sb.length() > 1 && sb.charAt(0) == '0') {
            sb.deleteCharAt(0);
        }
        return sb.toString();
    }
}
